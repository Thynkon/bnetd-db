#!/usr/bin/env ruby

require "concurrent"
require "bnetd"

parser = Bnetd::Parser.new(ARGV)
options = parser.parse!

# deconstruct hashmap and create variables from keys
options => {database_name:, database_host:, database_port:, interface:, ports:}

pool = Concurrent::ThreadPoolExecutor.new(
  min_threads: [2, Concurrent.processor_count].max,
  max_threads: [2, Concurrent.processor_count].max,
  max_queue: [2, Concurrent.processor_count].max * 5,
  fallback_policy: :caller_runs,
)
sniffer = Bnetd::NetworkSniffer.new(interface: interface)

ports.each do |port|
  pool.post do
    connector = Bnetd::DbConnector.new(database_host, database_port, database_name)
    sniffer.capture(filter: "src port #{port}") do |raw_packets|
      connector.insert(:nic_protocol_traffic, {
                         ip: raw_packets.ip.src,
                         pkt_len: raw_packets.ip.length,
                         ts: Time.new.utc.to_i,
                         port: port,
                         iface: interface,
                       })
    end
  end
end

pool.shutdown
pool.wait_for_termination
